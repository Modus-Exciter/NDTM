using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Media;

namespace LogAnalyzer
{
  class GridColumnWidthHelper
  {
    private static readonly DataGridLength _star_length = new DataGridLength(1, DataGridLengthUnitType.Star);

    private static ConditionalWeakTable<IBindingListView, Dictionary<string, string>> _filter_dic 
      = new ConditionalWeakTable<IBindingListView, Dictionary<string, string>>();

    public static readonly EventHandler SetColumnWidth = new GridColumnWidthHelper().DataGrid_AutoGeneratedColumns;
    public static readonly TextChangedEventHandler ChangeFilter = new GridColumnWidthHelper().FilterRow_TextChanged;

    private void DataGrid_AutoGeneratedColumns(object sender, EventArgs e)
    {
      var grid = sender as DataGrid;

      if (grid == null)
        return;

      if (grid.Columns.Count > 0)
        grid.Columns[grid.Columns.Count - 1].Width = _star_length;
      if (grid.Columns.Count > 1)
        grid.Columns[grid.Columns.Count - 2].Width = _star_length;

      foreach (var column in grid.Columns.OfType<DataGridTextColumn>())
      {
        column.MinWidth = new FormattedText(column.Header.ToString(),
          CultureInfo.InvariantCulture,
          FlowDirection.LeftToRight,
          new Typeface(column.FontFamily, column.FontStyle, column.FontWeight, new FontStretch()),
          column.FontSize, new SolidColorBrush(Color.FromArgb(0, 0, 0, 0))).Width + 20;
      }
    }

    private void FilterRow_TextChanged(object sender, TextChangedEventArgs e)
    {
      var ctrl = sender as TextBox;
      var obj = ctrl.TemplatedParent as DataGridColumnHeader;
      var name = ((Binding)((DataGridBoundColumn)obj.Column).Binding).Path.Path;

      var grid = (DataGrid)(obj.Column.GetType().GetProperty("DataGridOwner", 
        BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).GetValue(obj.Column, null));

      var view = grid.ItemsSource as IBindingListView;

      if (view == null || !view.SupportsFiltering)
        return;

      Dictionary<string, string> filters = _filter_dic.GetValue(view, v => new Dictionary<string, string>());

      SetFilter(filters, name, ctrl.Text, view);
    }

    private void SetFilter(Dictionary<string, string> filters, string column, string value, IBindingListView view)
    {
      if (string.IsNullOrEmpty(column))
        return;

      if (string.IsNullOrEmpty(value))
        filters.Remove(column);
      else
        filters[column] = value;

      StringBuilder sb = new StringBuilder();
      bool first = true;

      foreach (var kv in filters)
      {
        if (first)
          first = false;
        else
          sb.Append(" AND ");

        sb.AppendFormat("Convert({0}, System.String) LIKE '{1}%'", kv.Key, kv.Value.Replace("'", "''"));
      }

      view.Filter = sb.ToString();
    }
  }
}
