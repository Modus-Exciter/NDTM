using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Reflection;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Media;

namespace Notung.Feuerzauber.Styles
{
  public partial class GridStyles : ResourceDictionary
  {
    private static readonly object _filters_dic_key = new object();

    public GridStyles()
    {
      this.InitializeComponent();
    }

    private void TextBox_TextChanged(object sender, System.Windows.Controls.TextChangedEventArgs e)
    {
      var ctrl = sender as TextBox; 
      var obj = ctrl.TemplatedParent as DataGridColumnHeader;
      var name = ((Binding)((DataGridBoundColumn)obj.Column).Binding).Path.Path;

      DataGrid grid = null;

      for (var parent = VisualTreeHelper.GetParent(obj); parent != null; parent = VisualTreeHelper.GetParent(parent))
      {
        grid = parent as DataGrid;

        if (grid != null)
          break;
      }

      var view = grid.ItemsSource as IBindingListView;

      if (view == null || !view.SupportsFiltering)
        return;

      Dictionary<string, string> filters = GetDictionary(grid);

      this.SetFilter(filters, name, ctrl.Text, view);
    }

    private static Dictionary<string, string> GetDictionary(DataGrid grid)
    {
      if (grid.Resources.Contains(_filters_dic_key))
      {
        return (Dictionary<string, string>)grid.Resources[_filters_dic_key];
      }
      else
      {
        var ret = new Dictionary<string, string>();
        grid.Resources[_filters_dic_key] = ret;
        return ret;
      }
    }

    private void HandleLoaded(object sender, EventArgs e)
    {
      DataGrid grid = sender as DataGrid;

      if (grid == null)
        return;

      if (grid.ItemsSource == null)
        grid.AutoGeneratedColumns += this.HandleLoaded;
      else
        SetMinSize(grid);
    }

    private static void HandleAutoGeneratedColumns(object sender, EventArgs e)
    {
      DataGrid grid = sender as DataGrid;

      if (grid != null)
        SetMinSize(grid);
    }

    private static void SetMinSize(DataGrid grid)
    {
      foreach (var column in grid.Columns)
      {
        column.MinWidth = new FormattedText(column.Header.ToString(),
          CultureInfo.InvariantCulture,
          FlowDirection.LeftToRight,
          new Typeface(grid.FontFamily, grid.FontStyle, FontWeight.FromOpenTypeWeight(500), grid.FontStretch),
          grid.FontSize, null).Width + 20;
      }
    }

    private void SetFilter(Dictionary<string, string> filters, string column, string value, IBindingListView view)
    {
      if (string.IsNullOrEmpty(column))
        return;

      if (string.IsNullOrEmpty(value))
        filters.Remove(column);
      else
        filters[column] = value;

      StringBuilder sb = new StringBuilder();
      bool first = true;

      foreach (var kv in filters)
      {
        if (first)
          first = false;
        else
          sb.Append(" AND ");

        sb.AppendFormat("Convert({0}, System.String) LIKE '{1}%'", kv.Key, kv.Value.Replace("'", "''"));
      }

      view.Filter = sb.ToString();
    }
  }
}
